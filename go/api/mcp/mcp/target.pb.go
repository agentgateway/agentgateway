// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.29.1
// source: mcp/target.proto

package mcp

import (
	common "github.com/agentgateway/agentgateway/go/api/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Target_Filter_Matcher int32

const (
	Target_Filter_EQUALS   Target_Filter_Matcher = 0
	Target_Filter_PREFIX   Target_Filter_Matcher = 1
	Target_Filter_SUFFIX   Target_Filter_Matcher = 2
	Target_Filter_CONTAINS Target_Filter_Matcher = 3
	Target_Filter_REGEX    Target_Filter_Matcher = 4
)

// Enum value maps for Target_Filter_Matcher.
var (
	Target_Filter_Matcher_name = map[int32]string{
		0: "EQUALS",
		1: "PREFIX",
		2: "SUFFIX",
		3: "CONTAINS",
		4: "REGEX",
	}
	Target_Filter_Matcher_value = map[string]int32{
		"EQUALS":   0,
		"PREFIX":   1,
		"SUFFIX":   2,
		"CONTAINS": 3,
		"REGEX":    4,
	}
)

func (x Target_Filter_Matcher) Enum() *Target_Filter_Matcher {
	p := new(Target_Filter_Matcher)
	*p = x
	return p
}

func (x Target_Filter_Matcher) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Target_Filter_Matcher) Descriptor() protoreflect.EnumDescriptor {
	return file_mcp_target_proto_enumTypes[0].Descriptor()
}

func (Target_Filter_Matcher) Type() protoreflect.EnumType {
	return &file_mcp_target_proto_enumTypes[0]
}

func (x Target_Filter_Matcher) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Target_Filter_Matcher.Descriptor instead.
func (Target_Filter_Matcher) EnumDescriptor() ([]byte, []int) {
	return file_mcp_target_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the target.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The listeners which are allowed to connect to the target.
	Listeners []string `protobuf:"bytes,2,rep,name=listeners,proto3" json:"listeners,omitempty"`
	// Types that are assignable to Target:
	//
	//	*Target_Sse
	//	*Target_Openapi
	//	*Target_Stdio
	Target isTarget_Target `protobuf_oneof:"target"`
	// The filters which are applied to the target.
	// If empty, all resources will be allowed.
	// All filters will be ORed together.
	// If any filter matches, then the resource will not be filtered.
	Filters []*Target_Filter `protobuf:"bytes,6,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *Target) Reset() {
	*x = Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcp_target_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_target_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_mcp_target_proto_rawDescGZIP(), []int{0}
}

func (x *Target) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Target) GetListeners() []string {
	if x != nil {
		return x.Listeners
	}
	return nil
}

func (m *Target) GetTarget() isTarget_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *Target) GetSse() *Target_SseTarget {
	if x, ok := x.GetTarget().(*Target_Sse); ok {
		return x.Sse
	}
	return nil
}

func (x *Target) GetOpenapi() *Target_OpenAPITarget {
	if x, ok := x.GetTarget().(*Target_Openapi); ok {
		return x.Openapi
	}
	return nil
}

func (x *Target) GetStdio() *Target_StdioTarget {
	if x, ok := x.GetTarget().(*Target_Stdio); ok {
		return x.Stdio
	}
	return nil
}

func (x *Target) GetFilters() []*Target_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type isTarget_Target interface {
	isTarget_Target()
}

type Target_Sse struct {
	Sse *Target_SseTarget `protobuf:"bytes,3,opt,name=sse,proto3,oneof"`
}

type Target_Openapi struct {
	Openapi *Target_OpenAPITarget `protobuf:"bytes,4,opt,name=openapi,proto3,oneof"`
}

type Target_Stdio struct {
	Stdio *Target_StdioTarget `protobuf:"bytes,5,opt,name=stdio,proto3,oneof"`
}

func (*Target_Sse) isTarget_Target() {}

func (*Target_Openapi) isTarget_Target() {}

func (*Target_Stdio) isTarget_Target() {}

type Target_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match   string                `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Matcher Target_Filter_Matcher `protobuf:"varint,2,opt,name=matcher,proto3,enum=agentgateway.dev.mcp.target.Target_Filter_Matcher" json:"matcher,omitempty"`
	// The type of the resource that the filter applies to.
	// For MCP, the supported types are:
	// - tool
	// - prompt
	// - resource
	// If empty, it will match any type.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Target_Filter) Reset() {
	*x = Target_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcp_target_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target_Filter) ProtoMessage() {}

func (x *Target_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_target_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target_Filter.ProtoReflect.Descriptor instead.
func (*Target_Filter) Descriptor() ([]byte, []int) {
	return file_mcp_target_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Target_Filter) GetMatch() string {
	if x != nil {
		return x.Match
	}
	return ""
}

func (x *Target_Filter) GetMatcher() Target_Filter_Matcher {
	if x != nil {
		return x.Matcher
	}
	return Target_Filter_EQUALS
}

func (x *Target_Filter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Target_SseTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host of the target.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The port of the target.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The path of the target.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// The headers of the target.
	Headers []*common.Header    `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty"`
	Auth    *common.BackendAuth `protobuf:"bytes,5,opt,name=auth,proto3" json:"auth,omitempty"`
	Tls     *common.BackendTls  `protobuf:"bytes,6,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *Target_SseTarget) Reset() {
	*x = Target_SseTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcp_target_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target_SseTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target_SseTarget) ProtoMessage() {}

func (x *Target_SseTarget) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_target_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target_SseTarget.ProtoReflect.Descriptor instead.
func (*Target_SseTarget) Descriptor() ([]byte, []int) {
	return file_mcp_target_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Target_SseTarget) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Target_SseTarget) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Target_SseTarget) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Target_SseTarget) GetHeaders() []*common.Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Target_SseTarget) GetAuth() *common.BackendAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *Target_SseTarget) GetTls() *common.BackendTls {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Target_StdioTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The command of the target.
	Cmd string `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	// The arguments of the target.
	Args []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	// The environment variables of the target.
	Env map[string]string `protobuf:"bytes,3,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Target_StdioTarget) Reset() {
	*x = Target_StdioTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcp_target_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target_StdioTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target_StdioTarget) ProtoMessage() {}

func (x *Target_StdioTarget) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_target_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target_StdioTarget.ProtoReflect.Descriptor instead.
func (*Target_StdioTarget) Descriptor() ([]byte, []int) {
	return file_mcp_target_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Target_StdioTarget) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *Target_StdioTarget) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Target_StdioTarget) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

type Target_OpenAPITarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host of the target.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The port of the target.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The schema of the target.
	Schema  *common.LocalDataSource `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Auth    *common.BackendAuth     `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
	Tls     *common.BackendTls      `protobuf:"bytes,5,opt,name=tls,proto3" json:"tls,omitempty"`
	Headers []*common.Header        `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *Target_OpenAPITarget) Reset() {
	*x = Target_OpenAPITarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcp_target_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target_OpenAPITarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target_OpenAPITarget) ProtoMessage() {}

func (x *Target_OpenAPITarget) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_target_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target_OpenAPITarget.ProtoReflect.Descriptor instead.
func (*Target_OpenAPITarget) Descriptor() ([]byte, []int) {
	return file_mcp_target_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Target_OpenAPITarget) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Target_OpenAPITarget) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Target_OpenAPITarget) GetSchema() *common.LocalDataSource {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Target_OpenAPITarget) GetAuth() *common.BackendAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *Target_OpenAPITarget) GetTls() *common.BackendTls {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Target_OpenAPITarget) GetHeaders() []*common.Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

var File_mcp_target_proto protoreflect.FileDescriptor

var file_mcp_target_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x63, 0x70, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x6d, 0x63, 0x70, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x0a, 0x0a, 0x06, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x03, 0x73, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x6d, 0x63, 0x70, 0x2e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x73, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x6d,
	0x63, 0x70, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x64,
	0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x6d, 0x63, 0x70, 0x2e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x74,
	0x64, 0x69, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x64,
	0x69, 0x6f, 0x12, 0x44, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x6d, 0x63, 0x70, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x4c, 0x0a, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x6d, 0x63,
	0x70, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x07, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x55, 0x46, 0x46, 0x49, 0x58, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x47, 0x45,
	0x58, 0x10, 0x04, 0x1a, 0xf3, 0x01, 0x0a, 0x09, 0x53, 0x73, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x39, 0x0a,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x35, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x54, 0x6c, 0x73, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x1a, 0xb7, 0x01, 0x0a, 0x0b, 0x53, 0x74,
	0x64, 0x69, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12,
	0x4a, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x6d, 0x63, 0x70, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x2e, 0x53, 0x74, 0x64, 0x69, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x45, 0x6e,
	0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x1a, 0x36, 0x0a, 0x08, 0x45,
	0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0xa5, 0x02, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x38, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x03, 0x74, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6c, 0x73, 0x52, 0x03, 0x74, 0x6c, 0x73,
	0x12, 0x39, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x67, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x63, 0x70, 0x3b, 0x6d, 0x63, 0x70, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mcp_target_proto_rawDescOnce sync.Once
	file_mcp_target_proto_rawDescData = file_mcp_target_proto_rawDesc
)

func file_mcp_target_proto_rawDescGZIP() []byte {
	file_mcp_target_proto_rawDescOnce.Do(func() {
		file_mcp_target_proto_rawDescData = protoimpl.X.CompressGZIP(file_mcp_target_proto_rawDescData)
	})
	return file_mcp_target_proto_rawDescData
}

var file_mcp_target_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mcp_target_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_mcp_target_proto_goTypes = []interface{}{
	(Target_Filter_Matcher)(0),     // 0: agentgateway.dev.mcp.target.Target.Filter.Matcher
	(*Target)(nil),                 // 1: agentgateway.dev.mcp.target.Target
	(*Target_Filter)(nil),          // 2: agentgateway.dev.mcp.target.Target.Filter
	(*Target_SseTarget)(nil),       // 3: agentgateway.dev.mcp.target.Target.SseTarget
	(*Target_StdioTarget)(nil),     // 4: agentgateway.dev.mcp.target.Target.StdioTarget
	(*Target_OpenAPITarget)(nil),   // 5: agentgateway.dev.mcp.target.Target.OpenAPITarget
	nil,                            // 6: agentgateway.dev.mcp.target.Target.StdioTarget.EnvEntry
	(*common.Header)(nil),          // 7: agentgateway.dev.common.Header
	(*common.BackendAuth)(nil),     // 8: agentgateway.dev.common.BackendAuth
	(*common.BackendTls)(nil),      // 9: agentgateway.dev.common.BackendTls
	(*common.LocalDataSource)(nil), // 10: agentgateway.dev.common.LocalDataSource
}
var file_mcp_target_proto_depIdxs = []int32{
	3,  // 0: agentgateway.dev.mcp.target.Target.sse:type_name -> agentgateway.dev.mcp.target.Target.SseTarget
	5,  // 1: agentgateway.dev.mcp.target.Target.openapi:type_name -> agentgateway.dev.mcp.target.Target.OpenAPITarget
	4,  // 2: agentgateway.dev.mcp.target.Target.stdio:type_name -> agentgateway.dev.mcp.target.Target.StdioTarget
	2,  // 3: agentgateway.dev.mcp.target.Target.filters:type_name -> agentgateway.dev.mcp.target.Target.Filter
	0,  // 4: agentgateway.dev.mcp.target.Target.Filter.matcher:type_name -> agentgateway.dev.mcp.target.Target.Filter.Matcher
	7,  // 5: agentgateway.dev.mcp.target.Target.SseTarget.headers:type_name -> agentgateway.dev.common.Header
	8,  // 6: agentgateway.dev.mcp.target.Target.SseTarget.auth:type_name -> agentgateway.dev.common.BackendAuth
	9,  // 7: agentgateway.dev.mcp.target.Target.SseTarget.tls:type_name -> agentgateway.dev.common.BackendTls
	6,  // 8: agentgateway.dev.mcp.target.Target.StdioTarget.env:type_name -> agentgateway.dev.mcp.target.Target.StdioTarget.EnvEntry
	10, // 9: agentgateway.dev.mcp.target.Target.OpenAPITarget.schema:type_name -> agentgateway.dev.common.LocalDataSource
	8,  // 10: agentgateway.dev.mcp.target.Target.OpenAPITarget.auth:type_name -> agentgateway.dev.common.BackendAuth
	9,  // 11: agentgateway.dev.mcp.target.Target.OpenAPITarget.tls:type_name -> agentgateway.dev.common.BackendTls
	7,  // 12: agentgateway.dev.mcp.target.Target.OpenAPITarget.headers:type_name -> agentgateway.dev.common.Header
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_mcp_target_proto_init() }
func file_mcp_target_proto_init() {
	if File_mcp_target_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mcp_target_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcp_target_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcp_target_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target_SseTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcp_target_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target_StdioTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcp_target_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target_OpenAPITarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mcp_target_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Target_Sse)(nil),
		(*Target_Openapi)(nil),
		(*Target_Stdio)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mcp_target_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mcp_target_proto_goTypes,
		DependencyIndexes: file_mcp_target_proto_depIdxs,
		EnumInfos:         file_mcp_target_proto_enumTypes,
		MessageInfos:      file_mcp_target_proto_msgTypes,
	}.Build()
	File_mcp_target_proto = out.File
	file_mcp_target_proto_rawDesc = nil
	file_mcp_target_proto_goTypes = nil
	file_mcp_target_proto_depIdxs = nil
}
