name: Release

on:
  push:
    tags:
    - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number'


env:
  REGISTRY_IMAGE: ghcr.io/mcp-proxy/mcp-proxy

jobs:
  build-image:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            os: ubuntu-latest
          - platform: linux/arm64
            os: ubuntu-22.04-arm
    steps:
    - name: Prepare
      run: |
        platform=${{ matrix.platform }}
        echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_IMAGE }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push by digest
      id: build
      uses: docker/build-push-action@v6
      with:
        platforms: ${{ matrix.platform }}
        labels: ${{ steps.meta.outputs.labels }}
        tags: ${{ env.REGISTRY_IMAGE }}
        outputs: type=image,push-by-digest=true,name-canonical=true,push=true

    - name: Export digest
      run: |
        mkdir -p ${{ runner.temp }}/digests
        digest="${{ steps.build.outputs.digest }}"
        touch "${{ runner.temp }}/digests/${digest#sha256:}"

    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ env.PLATFORM_PAIR }}
        path: ${{ runner.temp }}/digests/*
        if-no-files-found: error
        retention-days: 1

  push-image:
    runs-on: ubuntu-latest
    needs:
      - build-image
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: | 
            type=semver,pattern={{version}}
            # use custom value instead of git tag
            type=semver,pattern={{version}},value=${{ github.event.inputs.version }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

  ext-image:
    needs:
      - push-image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      env:
        DOCKER_BUILDER: "docker buildx"
      run: |
        # if workflow_dispatch is used, use the version input
        if [ -n "${{ github.event.inputs.version }}" ]; then
          export VERSION=${{ github.event.inputs.version }}
        else
          export VERSION=$(echo "$GITHUB_REF" | cut -c12-)
        fi
        make docker-ext DOCKER_BUILD_ARGS="--push --platform linux/amd64,linux/arm64 --build-arg VERSION=$VERSION"
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-22.04-arm, macos-latest]
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Install Protoc
      uses: arduino/setup-protoc@v3
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Build
      run: make build
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-binary-${{ matrix.os }}
        path: target/release/mcp-proxy
  release:
    needs:
    - ext-image
    - build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: release-binary-*
      
    - name: Display structure of downloaded files
      run: |
        ls -R
        mkdir outputs
        mv release-binary-macos-latest/mcp-proxy outputs/mcp-proxy-darwin-arm64
        mv release-binary-ubuntu-latest/mcp-proxy outputs/mcp-proxy-linux-amd64
        mv release-binary-ubuntu-22.04-arm/mcp-proxy outputs/mcp-proxy-linux-arm64
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: outputs/mcp-proxy-*
        tag_name: ${{ github.ref_name }}
        body: "Automated release of ${{ github.ref_name }}."
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: startsWith(github.ref, 'refs/tags/')