#!/bin/bash

# Pre-commit hook to prevent sensitive information from being committed
# This hook checks for patterns that might leak personal or local information

set -e

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Function to print colored output
print_error() {
    echo -e "${RED}ERROR: $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}WARNING: $1${NC}"
}

print_success() {
    echo -e "${GREEN}SUCCESS: $1${NC}"
}

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Not in a git repository"
    exit 1
fi

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    print_success "No staged files to check"
    exit 0
fi

# Patterns to check for sensitive information
declare -a SENSITIVE_PATTERNS=(
    # Personal information
    "mkostreba"
    "michael\.kostreba"
    "wingedcommerce\.com"
    "wc-p3-001"
    
    # Local paths
    "/home/[^/]+"
    "/Users/[^/]+"
    "C:\\\\Users\\\\[^\\\\]+"
    
    # Local hostnames and IPs
    "localhost:[0-9]+"
    "127\.0\.0\.1:[0-9]+"
    "192\.168\.[0-9]+\.[0-9]+"
    "10\.[0-9]+\.[0-9]+\.[0-9]+"
    
    # Hardcoded credentials (basic patterns)
    "password\s*=\s*['\"][^'\"]+['\"]"
    "api_key\s*=\s*['\"][^'\"]+['\"]"
    "secret\s*=\s*['\"][^'\"]+['\"]"
    "token\s*=\s*['\"][^'\"]+['\"]"
    
    # Local development indicators
    "\.local"
    "dev-config"
    "localhost-config\.json"
    
    # VSCode specific paths
    "\.vscode/"
    "settings\.json"
    "launch\.json"
    "tasks\.json"
)

# Files to exclude from sensitive pattern checking
declare -a EXCLUDE_FILES=(
    "\.gitignore"
    "\.env\.example"
    "README\.md"
    "DEVELOPMENT\.md"
    "SECURITY\.md"
    "CONTRIBUTING\.md"
    "\.githooks/.*"
    "\.vscode-templates/.*"
    "manifests/.*\.example\.json"
)

# Function to check if file should be excluded
should_exclude_file() {
    local file="$1"
    for pattern in "${EXCLUDE_FILES[@]}"; do
        if [[ "$file" =~ $pattern ]]; then
            return 0
        fi
    done
    return 1
}

# Function to check for sensitive patterns in a file
check_file_for_sensitive_content() {
    local file="$1"
    local found_issues=0
    
    # Skip binary files
    if ! git diff --cached --numstat "$file" | grep -q "^-"; then
        if file "$file" | grep -q "binary"; then
            return 0
        fi
    fi
    
    # Check each sensitive pattern
    for pattern in "${SENSITIVE_PATTERNS[@]}"; do
        if git show ":$file" | grep -qE "$pattern"; then
            print_error "Sensitive pattern '$pattern' found in $file"
            # Show the matching lines
            git show ":$file" | grep -nE "$pattern" | head -3
            found_issues=1
        fi
    done
    
    return $found_issues
}

# Function to check for .vscode directory
check_vscode_directory() {
    if echo "$STAGED_FILES" | grep -q "^\.vscode/"; then
        print_error ".vscode/ directory files are staged for commit"
        print_error "Use .vscode-templates/ instead and customize locally"
        return 1
    fi
    return 0
}

# Function to check for local config files
check_local_configs() {
    local found_issues=0
    
    # Check for localhost-config.json (should use example)
    if echo "$STAGED_FILES" | grep -q "manifests/localhost-config\.json$"; then
        print_error "localhost-config.json should not be committed"
        print_error "Use localhost-config.example.json as template"
        found_issues=1
    fi
    
    # Check for .env files
    if echo "$STAGED_FILES" | grep -qE "\.env$|\.env\.local$"; then
        print_error "Environment files (.env, .env.local) should not be committed"
        print_error "Use .env.example as template"
        found_issues=1
    fi
    
    return $found_issues
}

# Function to check Python version file
check_python_version() {
    if echo "$STAGED_FILES" | grep -q "^\.python-version$"; then
        print_warning ".python-version file is being committed"
        print_warning "This may contain local Python version preferences"
        # Don't fail, just warn
    fi
    return 0
}

# Main execution
echo "üîç Running pre-commit security checks..."

TOTAL_ISSUES=0

# Check for .vscode directory
if ! check_vscode_directory; then
    ((TOTAL_ISSUES++))
fi

# Check for local config files
if ! check_local_configs; then
    ((TOTAL_ISSUES++))
fi

# Check Python version file
check_python_version

# Check each staged file for sensitive content
for file in $STAGED_FILES; do
    if should_exclude_file "$file"; then
        continue
    fi
    
    if ! check_file_for_sensitive_content "$file"; then
        ((TOTAL_ISSUES++))
    fi
done

# Final result
if [ $TOTAL_ISSUES -eq 0 ]; then
    print_success "All security checks passed!"
    exit 0
else
    print_error "Found $TOTAL_ISSUES security issue(s)"
    echo ""
    echo "To fix these issues:"
    echo "1. Remove sensitive information from staged files"
    echo "2. Use environment variables or templates instead"
    echo "3. Check .gitignore to prevent future issues"
    echo ""
    echo "To bypass this check (NOT RECOMMENDED):"
    echo "git commit --no-verify"
    exit 1
fi
