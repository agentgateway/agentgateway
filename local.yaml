# yaml-language-server: $schema=../schema/local.json
config:
#  logging:
#    filter: 'response.code = 500'
binds:
- port: 80
  listeners:
  - name: default
    protocol: HTTP
    routes:
    - name: default
      matches:
      - path:
          pathPrefix: /
      policies:
        timeout:
          requestTimeout: 1500ms
        requestHeaderModifier:
          add: [["x-req", "world"]]
        responseHeaderModifier:
          add: [["x-resp", "world"]]
        cors:
          allowOrigins: ["https://example.com"]
          allowMethods: ["GET"]
          allowHeaders: ["X-Header"]
          allowCredentials: true
          exposeHeaders: ["X-expose"]
          maxAge: 30s
      #        localRateLimit:
      #        - maxTokens: 10
      #          tokensPerFill: 1
      #          fillInterval: 1s
        directResponse:
          body: ""
          status: "200"
      backends:
      - host: 127.0.0.1:8080
    - name: tls
      matches:
      - path:
          pathPrefix: /tls
      backends:
      - host: localhost:8443

    - name: mirror
      matches:
      - path:
          pathPrefix: /mirror
      backends:
      - host: lo:8080
      policies:
        requestMirror:
          backend:
            host: lo:8081
          percentage: 1
    - name: dfp
      matches:
      - path:
          pathPrefix: /
        headers:
        - name: x-mode
          value:
            exact: dfp
      backends:
      - dynamic: { }
    - name: extauthz
      matches:
      - path:
          pathPrefix: /extauthz
      backends:
      - host: 127.0.0.1:8080
      policies:
        extAuthz:
          target: lo:8083
          context:
            config_id: default.basic-auth
    - name: extrate
      matches:
      - path:
          pathPrefix: /extrate
      backends:
      - host: 127.0.0.1:8080
      policies:
        remoteRateLimit:
          target: lo:18081
          descriptors:
            generic_key:
              static: default.ratelimit-config
            type:
              requestHeader: x-type
    - name: jwt
      matches:
      - path:
          pathPrefix: /jwt
      backends:
      - host: localhost:8080
      policies:
        jwtAuth:
          issuer: agentgateway.dev
          audiences: [test.agentgateway.dev]
          jwks:
            # Relative to the folder the binary runs from, not the config file
            file: ./manifests/jwt/pub-key
    - matches:
      - path:
          pathPrefix: /svc
      backends:
      - service:
          name: default/example.com
          port: 8080

workloads:
- uid: cluster1//v1/Pod/default/local
  name: local
  namespace: default
  serviceAccount: default
  workloadIps: ["127.0.0.1"]
  protocol: HBONE
  node: local
  network: ""
  services:
    "default/example.com":
      80: 8080
- uid: cluster1//v1/Pod/default/local2
  name: local2
  namespace: default
  serviceAccount: default
  workloadIps: ["127.0.0.2"]
  protocol: TCP
  node: local
  network: ""
  services:
    "default/example.com":
      80: 8080
services:
- name: local
  namespace: default
  hostname: example.com
  vips:
  - /127.10.0.1
  ports:
    80: 8080
    81: 8080
  appProtocols:
    80: Http11
    81: Http2
  subjectAltNames:
  - spiffe://cluster.local/ns/default/sa/local